/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef UserService_H
#define UserService_H

#include <TProcessor.h>
#include "acsuser_types.h"



class UserServiceIf {
 public:
  virtual ~UserServiceIf() {}
  virtual void add(const User& u) = 0;
  virtual void get(User& _return, const std::string& uid) = 0;
};

class UserServiceNull : virtual public UserServiceIf {
 public:
  virtual ~UserServiceNull() {}
  void add(const User& /* u */) {
    return;
  }
  void get(User& /* _return */, const std::string& /* uid */) {
    return;
  }
};

typedef struct _UserService_add_args__isset {
  _UserService_add_args__isset() : u(false) {}
  bool u;
} _UserService_add_args__isset;

class UserService_add_args {
 public:

  UserService_add_args() {
  }

  virtual ~UserService_add_args() throw() {}

  User u;

  _UserService_add_args__isset __isset;

  void __set_u(const User& val) {
    u = val;
  }

  bool operator == (const UserService_add_args & rhs) const
  {
    if (!(u == rhs.u))
      return false;
    return true;
  }
  bool operator != (const UserService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_add_pargs {
 public:


  virtual ~UserService_add_pargs() throw() {}

  const User* u;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_add_result {
 public:

  UserService_add_result() {
  }

  virtual ~UserService_add_result() throw() {}


  bool operator == (const UserService_add_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_add_presult {
 public:


  virtual ~UserService_add_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_get_args__isset {
  _UserService_get_args__isset() : uid(false) {}
  bool uid;
} _UserService_get_args__isset;

class UserService_get_args {
 public:

  UserService_get_args() : uid("") {
  }

  virtual ~UserService_get_args() throw() {}

  std::string uid;

  _UserService_get_args__isset __isset;

  void __set_uid(const std::string& val) {
    uid = val;
  }

  bool operator == (const UserService_get_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const UserService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_get_pargs {
 public:


  virtual ~UserService_get_pargs() throw() {}

  const std::string* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_get_result__isset {
  _UserService_get_result__isset() : success(false) {}
  bool success;
} _UserService_get_result__isset;

class UserService_get_result {
 public:

  UserService_get_result() {
  }

  virtual ~UserService_get_result() throw() {}

  User success;

  _UserService_get_result__isset __isset;

  void __set_success(const User& val) {
    success = val;
  }

  bool operator == (const UserService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_get_presult__isset {
  _UserService_get_presult__isset() : success(false) {}
  bool success;
} _UserService_get_presult__isset;

class UserService_get_presult {
 public:


  virtual ~UserService_get_presult() throw() {}

  User* success;

  _UserService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserServiceClient : virtual public UserServiceIf {
 public:
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(const User& u);
  void send_add(const User& u);
  void recv_add();
  void get(User& _return, const std::string& uid);
  void send_get(const std::string& uid);
  void recv_get(User& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<UserServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (UserServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserServiceProcessor(boost::shared_ptr<UserServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &UserServiceProcessor::process_add;
    processMap_["get"] = &UserServiceProcessor::process_get;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~UserServiceProcessor() {}
};

class UserServiceMultiface : virtual public UserServiceIf {
 public:
  UserServiceMultiface(std::vector<boost::shared_ptr<UserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserServiceIf> > ifaces_;
  UserServiceMultiface() {}
  void add(boost::shared_ptr<UserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(const User& u) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->add(u);
    }
  }

  void get(User& _return, const std::string& uid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get(_return, uid);
        return;
      } else {
        ifaces_[i]->get(_return, uid);
      }
    }
  }

};



#endif
