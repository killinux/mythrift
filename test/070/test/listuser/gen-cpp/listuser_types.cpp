/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "listuser_types.h"



const char* User::ascii_fingerprint = "F03610BB0DDEA6AA6B25C17FF584E46D";
const uint8_t User::binary_fingerprint[16] = {0xF0,0x36,0x10,0xBB,0x0D,0xDE,0xA6,0xAA,0x6B,0x25,0xC1,0x7F,0xF5,0x84,0xE4,0x6D};

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uname);
          this->__isset.uname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->usex);
          this->__isset.usex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->uage);
          this->__isset.uage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->subNodeList.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->subNodeList.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->subNodeList[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.subNodeList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->subNodeMap.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _ktype6;
            ::apache::thrift::protocol::TType _vtype7;
            iprot->readMapBegin(_ktype6, _vtype7, _size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              int32_t _key10;
              xfer += iprot->readI32(_key10);
              std::string& _val11 = this->subNodeMap[_key10];
              xfer += iprot->readString(_val11);
            }
            iprot->readMapEnd();
          }
          this->__isset.subNodeMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->subNodeSet.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            iprot->readSetBegin(_etype15, _size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              int32_t _elem17;
              xfer += iprot->readI32(_elem17);
              this->subNodeSet.insert(_elem17);
            }
            iprot->readSetEnd();
          }
          this->__isset.subNodeSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("User");
  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("uname", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->uname);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("usex", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->usex);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("uage", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->uage);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("subNodeList", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->subNodeList.size()));
    std::vector<int32_t> ::const_iterator _iter18;
    for (_iter18 = this->subNodeList.begin(); _iter18 != this->subNodeList.end(); ++_iter18)
    {
      xfer += oprot->writeI32((*_iter18));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("subNodeMap", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->subNodeMap.size()));
    std::map<int32_t, std::string> ::const_iterator _iter19;
    for (_iter19 = this->subNodeMap.begin(); _iter19 != this->subNodeMap.end(); ++_iter19)
    {
      xfer += oprot->writeI32(_iter19->first);
      xfer += oprot->writeString(_iter19->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("subNodeSet", ::apache::thrift::protocol::T_SET, 7);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->subNodeSet.size()));
    std::set<int32_t> ::const_iterator _iter20;
    for (_iter20 = this->subNodeSet.begin(); _iter20 != this->subNodeSet.end(); ++_iter20)
    {
      xfer += oprot->writeI32((*_iter20));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


